	// =>위의 내용을 반복문 1번만 사용해서 작성
	// 출력하는 구문은 다른 구문을 사용할 수 없습니다.
	// 반복문의 개수를 줄이는 것은 중요한 문제

	// for i := 0; i < 25; i++ {
	// 	fmt.Print("*")

	// 	if i%5 == 4 {
	// 		fmt.Print("\n")
	// 	}
	// }

	// =>아래처럼 변경
	// *
	// **
	// ***
	// ****
	// *****

	// for i := 0; i < 5; i++ {
	// 	for j := 0; j <= i; j++ {
	// 		fmt.Print("*")
	// 	}
	// 	fmt.Println()
	// }

	// =>아래처럼 변경
	// *****
	// ****
	// ***
	// **
	// *
	// for i := 0; i < 5; i++ {

	// 	for j := 0; j < 5-i; j++ {
	// 		fmt.Print("*")
	// 	}
	// 	fmt.Println()
	// }

	// =>아래처럼 변경
	// *
	// **
	// ***
	// **
	// *

	// for i := 0; i < 5; i++ {
	// 	if i <= 2 {
	// 		for j := 0; j < i+1; j++ {
	// 			print("*")
	// 		}
	// 	} else {
	// 		for j := 0; j < 5-i; j++ {
	// 			print("*")
	// 		}
	// 	}
	// 	fmt.Println()
	// }

	// => 이렇게 출력하도록 작성
	//     *
	//    ***
	//   *****
	//  *******
	// *********

	// for i := 0; i < 5; i++ {
	// 	for j := 0; j < 4-i; j++ {
	// 		fmt.Print(" ")
	// 	}
	// 	for j := 0; j < 2*i+1; j++ {
	// 		fmt.Print("*")
	// 	}
	// 	fmt.Println()
	// }

	// => 이렇게 출력하도록 작성
	//     *
	//    * *
	//   *   *
	//  *     *
	// *       *

	// for i := 0; i < 5; i++ {
	// 	for j := 0; j < 4-i; j++ {
	// 		fmt.Print(" ")
	// 	}
	// 	fmt.Print("*")
	// 	for j := 0; j < 2*i-1; j++ {
	// 		fmt.Print(" ")
	// 	}
	// 	fmt.Print("*")
	// 	fmt.Println()
	// }

	// 숫자 1부터 5까지 차례대로 출력

	// for i := 1; i <= 5; i++ {
	// 	fmt.Println(i)
	// }

	// fmt.Println(1)
	// fmt.Println(2)
	// fmt.Println(3)
	// fmt.Println(4)
	// fmt.Println(5)

	// =>
	// var str : string = "가나다&가나다"
	// 글자 수 개수 출력
	// 첫번째 글자 와 마지막 글자의 동일성 여부를 확인
	str := "가나다&가나다"

	fmt.Println("글자수 :", utf8.RuneCountInString(str))

}

// => 2부터 1000까지 prime(소수)의 개수
//      - 소수는 1과 자기 자신으로만 나누어 떨어지는 수

// => 2부터 1000까지 완전수의 개수 : 3개
//      - 완전수는 자기 자신을 제외한 약수의 합이 자기 자신의 수

// 6 => 1, 2, 3, 6이 약수인데 6을 제외한 1, 2, 3을 더하면 6이 됩니다.

// => 10진수를 32자리 2진수로 출력

// => 선택정렬, 버블 정렬, 삽입 정렬, 2-way merge, quick 정렬
// => 이분 검색
