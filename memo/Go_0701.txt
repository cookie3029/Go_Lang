** 동시성(Concurrency)
=> 이 섹션의 내용은 웹 서버 프로그래밍만 하는 경우 사용을 하지 않을 수도 있습니다.
그러나 애플리케이션 개발에 있어서 필수적인 요소이므로 중요한 개념입니다.
웹 프레임워크를 사용하는 경우 대부분 프레임워크가 간편한 형태로 사용할 수 있도록 만들어서 제공을 합니다.

1. 동시성
=> 프로그램을 여러 독립된 작은 단위로 나누고 주어진 자원을 사용해서 빠르게 동시 다발적으로 수행하는 행위
=> 보통은 스레드와 동일시하지만 스레드보다는 조금 더 포괄적인 개념

1) Thread
=> 프로그램을 병렬로 수행할 수 있도록 OS에서 지원하는 기능
실행 중간에 다른 Thread로 제어권 이동이 가능하다는 것이 프로세스와 다른 점

=> 프로그램의 일부분을 할당받아서 처리하는데 일반적으로 하나의 함수

2) Go의 동시성
=> 프로그램을 여러 개의 독립된 작업으로 나누고(함수) 이를 스레드에 할당해서 수행하는데 스레드의 개념에서는
        하나의 함수만 실행하지만 동시성의 개념에서는 하나의 스레드가 여러 개의 함수를 실행할 수 있도록 합니다.

2. GoRoutine
=> 경량 스레드
=> 모든 Go의 함수는 GoRoutine입니다.
=> 함수를 Goroutine으로 실행하고자 할 때는 함수를 호출할 때 앞에 go를 붙여주면 됩니다.

3. Channel
1) 데이터 공유
=> 여러 개의 작업이 도시에 수행되는 경우 고려할 점 중의 하나가 데이터를 어떻게 같이 사용하느냐 하는 문제
=> 공유 메모리를 사용하는 방식과 채널을 이용하는 방식(데이터 전달)이 있습니다.
=> 스레드에서는 공유 메모리를 이용하는 방식을 사용하고 Lock의 개념을 사용
=> 채널을 이용하는 방식은 통신의 개념을 자지고 공유 데이터를 수행하는 형태인데 
        데이터를 사용해야 하는 쪽에서는 데이터를 보내주는 쪽이 데이터를 전송해줄 때까지
        대기하고 있다가 데이터를 전송받으면 자신의 작업을 수행하는 방식으로 동작

2) 일반 채널 - 동기 채널
=> 생성
make(chan 데이터의 자료형)

=> 채널에 데이터 저장
채널 <- 데이터

=> 채널의 데이터를 저장
변수 := <- 채널

3) 버퍼 채널 - 비동기 채널
=> 여러 개의 값을 버퍼에 저장할 수 있는 채널
=> 생성
make(chan 데이터의 자료형, 개수)

4) select
=> 여러 채널을 동시에 제어할 수 있는 것

select {
        case 변수이름:= <- 채널:
                수행할 내용
        case 변수이름:= <- 채널:
                수행할 내용
        case <- time.After(시간):
                수행할 내용
        ...
}

4. Sync 패키지
1) 동기화 관련 객체 패키지
=> Mutex : 동시에 사용하지 못하도록 해주는 동기화 관련 객체
=> RWMutex : 읽기와 쓰기로 작업을 나누어서 동기화해주는 객체
=> Cond : 대기 중인 하나의 작업을 수행하도록 하거나 대기 중인 모든 작업을 수행하도록 해주는 객체
=> Once : 한 번만 실행하도록 해주는 객체
=> Pool : 동시에 사용할 수 있는 객체 풀을 만들어서 객체를 재사용하는 것
=> WaitGroup : 고루틴이 끝날때까지 대기
=> Atomic : 원자적 연산으로 어떤 작업이 중단되지 않고 한꺼번에 수행되도록 해주는 연산

2) Mutex : 사용을 못하도록 하는 객체
=> 구조체 : sync.Mutex
=> 함수 : Lock(), unLock()

3) RWMutex : 읽기와 쓰기 작업을 나누어서 사용을 못하도록 하는 객체
=> 구조체 : sync.RWMute
=> 함수 : Lock(), Unlock(), RLock(), Runlock()
RLock()과 RUnlock()은 읽기 전용 뮤텍스
Lock()과 Unlock()은 쓰기 전용 뮤텍스

4) Cond
=> 구조체 : sync.Cond
=> func NewCond(l Locker) * Cond : 객체 생성
=> func(c * Cond) Wait() : 대기
=> func(c * Cond) Signal() : 대기하고 있는 GoRoutine 하나만 깨움
=> func(c * Cond) Broadcast() : 대기하고 있는 고루틴 전부 깨움
=> Mutex와 같이 많이 사용

5) Once
=> 함수를 1번만 수행하도록 하는 것
=> 구조체 : sync.Once
=> 함수 : func (*Once) Do(f func())

6) Pool
=> 객체를 사용한 후 보관해 두었다가 다시 사용하게 해주는 기능
=> 자주 사용하는데 생성과 해제를 빈번히 해야하는 객체의 경우(데이터베이스 연동 객체)에는
        매번 생성하고 해제하는 것은 자주 낭비가 될 수 있습니다.
=> 이런 경우에는 객체를 미리 만들어 두었다가 필요할 대 꺼내서 사용하고 사용이 끝나면 풀에 반납하는 형태로
        사용하면 효율적입니다.
=> Spring 같은 프레임워크에서는 데이터베이스 연결 풀인 ConnectionPool을 사용

=> 구조체 : sync.Pool
=> func (p * Pool) Get() interface{} : 풀에 보관된 객체를 가져옴
=> func (p * Pool) Put(x inteface{}) : 풀에 객체를 보관

7) WaitGroup
=> GoRoutine이 종료될 때까지 대기
=> 구조체 : WaitGroup
=> 함수
func (wg *WaitGroup) Add(delta int) : 대기 그룹에 GoRoutine 개수 추가
func (wg *WaitGroup) Done() : GoRoutine이 끝났다는 것을 알려줄 때 사용
func (wg *WaitGroup) Wait() : GoRoutine이 끝날 때까지 대기

8) Atomic 연산(원자적 연산)
=> 더 이상 분해되지 않아야 하는 연산을 해야할 때 사용

9)Semaphore
=> 여러 개의 공유자원을 관리하기 위한 개념

** Go_Package
1.Package
=> 유사한 역할을 하는 모듈을 모아놓은 것으로 일반적으로 디렉토리의 개념과 유사
=> Go에서는 모든 파일이 패키지에 존재해야 합니다.
=> 패키지를 위한 디렉토리를 src 디렉토리 하위에 위치
=> Go의 모든 소스파일은 최상단에 자신의 패키지 이름을 기재
      - 일반적으로 실행 메서드(main)를 소유한 패키지 이름은 main으로 합니다.

2. 패키지 사용
=> 기본적으로 다른 패키지를 사용하려면 패키지를 import해야 합니다.
      - 여기서 패키지를 import한다는 개념은 패키지를 메모리에 로드한다는 의미입니다.

1) 하나의 패키지
import "패키지 이름"
=> 패키지의 내용을 import할 때 패키지 이름으로 메모리에 로드합니다.
=> 패키지 내의 요소는 패키지이름.요소이름으로 사용됩니다.
      - 단 요소의 이름이 대문자로 시작되어야만 다른 패키지에서 사용일 가능합니다.

2) 패키지에 속한 패키지
import "외부패키지이름/내부패키지이름"
=> 사용할 때는 외부패키지이름.내부패키지이름.요소의 형태로 사용됩니다

3) 여러 패키지 import
import {
        패키지1
        패키지2
        ...
}

4) 전역으로 import : 패키지 이름을 생략하고 사용할 수 있도록 import
=> 현재 패키지 내부에 위치시키는 개념
import . "패키지 이름"

5) 패키지의 이름을 변경해서 가져오기
import 새로운이름 "패키지이름"

6) 주의할 점
=> 사용하지 않는 패키지를 import 하면 에러
=> 패키지 이름 앞에 _를 붙이면 사용하지 않아도 에러가 발생하지 않습니다.

7) 외부 저장소의 패키지 사용
=> 지원하는 저장소
GitHub, BitBucket, LaunchPad, IBM, DevOps Service 등

=> 저장소 관련 애플리케이션이 설치되어 있어야 함
=> 현재 프로젝트 경로가 GOPATH라는 환경 변수에 등록이 되어 있어야 합니다.
      - 리눅스나 Mac에서 환경 변수 등록 - export 환경변수이름="값"
      - Mac 환경에서 GOPATH 확인법 : cd $GOPATH

=> 외부 저장소를 사용하는 경우
go get 명령을 수행
명령에 에러가 발생하면 go mod init을 수행하거나 GOPATH 환경 변수를 확인해야 합니다.

3. 패키지 생성
=> go install

=> 명령이 수행이 안되는 경우에는 아래와 같이 입력합니다.
go env -w GO111MODULE=auto

=> pkg 디렉토리에 모듈이름.a 파일이 생성되었는지 확인

** 파일 입출력
1. OS 패키지의 파일 처리 함수
=> func Create(name string) (file * File, err error)    : 기존 파일을 열거나 새 파일을 생성
=> func Open(name string) (file * File, err error)      : 기존 파일 열기
=> func (f *File) Close error : 파일 닫기

2. fmt 패키지의 파일 입출력 함수
=> Fprint, Fprintln, Fprintf
=> Fscan, Fscanln, Fscanf

** JSON 변환
=> encoding/json 패키지 이용
=> Go 언어 자료형을 JSON 텍스트로 변환    : func Marshal(v interface!{}) ([] byte, error)
=> JSON 텍스트를 Go 언어 자료형으로 변환 : func Unmarshal(data[] byte, v interface) error

** 암호화
1. 알고리즘 구현 방법
1) Hash 알고리즘 : MD5, SHA1, SHA256, SHA512 등의 방법이 있는데 데이터에서 고유한 해시 값을 추출하고 해시 값으로
        데이터를 만들어 낼 수 없는 방식의 단방향 암호화 알고리즘으로 주로 패스워드를 저장할 때 사용하는 방식입니다.

2) 대칭키 알고리즘(Symmetric-Key Algorithm) : AES, DES, RCR 등의 알고리즘이 있는데 암호화 키와 해독키가 동일

3) 공개키 알고리즘(Public-Key Infrastructure - PKI) : RSA가 대표적이며 암호화하는 키와 복호화하는 키가 다른 방식인데
        암호화하는 키는 알려주고 복호화하는 키는 비밀로 만드는 방식으로 공개키로는 비밀키를 만들어내기 힘들도록 설계됨

2. crypto/sha512 패키지의 함수
=> func New() hash.Hash: SHA512 방식의 해시 인스턴스 생성
=> func Sum512(data[] byte) [Size]byte : SHA512 해시를 계산해서 리턴
=> func (d * digest) Write(p[] byte) (nn int, err error) : 해시 인스턴스에 데이터 추가
=> func (d0 * digest) Sum(in[] byte) []byte : 해시 인스턴스에 저장된 데이터의 SHA512 해시값 추출

3. AES 대칭키 알고리즘 - crypto/aes 패키지
=> func NewCipher(key[] byte) (cipher.Block, error) : 대칭키 암호화 블럭 생성
=> func (c * aesCipher) Encrypt(dst, src[] byte) : 평문을 AES 알고리즘으로 암호화
=> func (c * aesCipher) Decrypt(dst, src[] byte) : AES 알고리즘으로 암호화된 데이터를 평문으로 복호화